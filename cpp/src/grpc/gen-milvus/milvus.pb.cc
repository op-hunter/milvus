// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#include "milvus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QueryResult_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Range_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RowRecord_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TableName_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SearchVectorInfos_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status_status_2eproto;
namespace milvus {
namespace grpc {
class TableNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableName> _instance;
} _TableName_default_instance_;
class TableSchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableSchema> _instance;
} _TableSchema_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Range> _instance;
} _Range_default_instance_;
class RowRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RowRecord> _instance;
} _RowRecord_default_instance_;
class InsertInfosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InsertInfos> _instance;
} _InsertInfos_default_instance_;
class VectorIdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorIds> _instance;
} _VectorIds_default_instance_;
class SearchVectorInfosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchVectorInfos> _instance;
} _SearchVectorInfos_default_instance_;
class SearchVectorInFilesInfosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchVectorInFilesInfos> _instance;
} _SearchVectorInFilesInfos_default_instance_;
class QueryResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryResult> _instance;
} _QueryResult_default_instance_;
class TopKQueryResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopKQueryResult> _instance;
} _TopKQueryResult_default_instance_;
class StringReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringReply> _instance;
} _StringReply_default_instance_;
class BoolReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoolReply> _instance;
} _BoolReply_default_instance_;
class TableRowCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableRowCount> _instance;
} _TableRowCount_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class ServerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerStatus> _instance;
} _ServerStatus_default_instance_;
}  // namespace grpc
}  // namespace milvus
static void InitDefaultsTableName_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_TableName_default_instance_;
    new (ptr) ::milvus::grpc::TableName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::TableName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableName_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableName_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsTableSchema_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_TableSchema_default_instance_;
    new (ptr) ::milvus::grpc::TableSchema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::TableSchema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableSchema_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableSchema_milvus_2eproto}, {
      &scc_info_TableName_milvus_2eproto.base,}};

static void InitDefaultsRange_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_Range_default_instance_;
    new (ptr) ::milvus::grpc::Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::Range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Range_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRange_milvus_2eproto}, {}};

static void InitDefaultsRowRecord_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_RowRecord_default_instance_;
    new (ptr) ::milvus::grpc::RowRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::RowRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RowRecord_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRowRecord_milvus_2eproto}, {}};

static void InitDefaultsInsertInfos_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_InsertInfos_default_instance_;
    new (ptr) ::milvus::grpc::InsertInfos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::InsertInfos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InsertInfos_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInsertInfos_milvus_2eproto}, {
      &scc_info_RowRecord_milvus_2eproto.base,}};

static void InitDefaultsVectorIds_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_VectorIds_default_instance_;
    new (ptr) ::milvus::grpc::VectorIds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::VectorIds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorIds_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorIds_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsSearchVectorInfos_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_SearchVectorInfos_default_instance_;
    new (ptr) ::milvus::grpc::SearchVectorInfos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::SearchVectorInfos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SearchVectorInfos_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSearchVectorInfos_milvus_2eproto}, {
      &scc_info_RowRecord_milvus_2eproto.base,
      &scc_info_Range_milvus_2eproto.base,}};

static void InitDefaultsSearchVectorInFilesInfos_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_SearchVectorInFilesInfos_default_instance_;
    new (ptr) ::milvus::grpc::SearchVectorInFilesInfos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::SearchVectorInFilesInfos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SearchVectorInFilesInfos_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSearchVectorInFilesInfos_milvus_2eproto}, {
      &scc_info_SearchVectorInfos_milvus_2eproto.base,}};

static void InitDefaultsQueryResult_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_QueryResult_default_instance_;
    new (ptr) ::milvus::grpc::QueryResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::QueryResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueryResult_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueryResult_milvus_2eproto}, {}};

static void InitDefaultsTopKQueryResult_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_TopKQueryResult_default_instance_;
    new (ptr) ::milvus::grpc::TopKQueryResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::TopKQueryResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TopKQueryResult_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTopKQueryResult_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,
      &scc_info_QueryResult_milvus_2eproto.base,}};

static void InitDefaultsStringReply_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_StringReply_default_instance_;
    new (ptr) ::milvus::grpc::StringReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::StringReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StringReply_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStringReply_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsBoolReply_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_BoolReply_default_instance_;
    new (ptr) ::milvus::grpc::BoolReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::BoolReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BoolReply_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBoolReply_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsTableRowCount_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_TableRowCount_default_instance_;
    new (ptr) ::milvus::grpc::TableRowCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::TableRowCount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableRowCount_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableRowCount_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsCommand_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_Command_default_instance_;
    new (ptr) ::milvus::grpc::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Command_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommand_milvus_2eproto}, {}};

static void InitDefaultsServerStatus_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::grpc::_ServerStatus_default_instance_;
    new (ptr) ::milvus::grpc::ServerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::grpc::ServerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerStatus_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerStatus_milvus_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

void InitDefaults_milvus_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TableName_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableSchema_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Range_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RowRecord_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InsertInfos_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorIds_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchVectorInfos_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchVectorInFilesInfos_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryResult_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TopKQueryResult_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringReply_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BoolReply_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableRowCount_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command_milvus_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerStatus_milvus_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_milvus_2eproto[15];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_milvus_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_milvus_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_milvus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableName, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableName, table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableSchema, table_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableSchema, index_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableSchema, dimension_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableSchema, store_raw_vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::Range, start_value_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::Range, end_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::RowRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::RowRecord, vector_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::InsertInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::InsertInfos, table_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::InsertInfos, row_record_array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::VectorIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::VectorIds, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::VectorIds, vector_id_array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInfos, table_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInfos, query_record_array_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInfos, query_range_array_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInfos, topk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInFilesInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInFilesInfos, file_id_array_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::SearchVectorInFilesInfos, search_vector_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::QueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::QueryResult, id_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::QueryResult, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TopKQueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TopKQueryResult, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TopKQueryResult, query_result_arrays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::StringReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::StringReply, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::StringReply, string_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::BoolReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::BoolReply, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::BoolReply, bool_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableRowCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableRowCount, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::TableRowCount, table_row_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::Command, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::ServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::ServerStatus, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::grpc::ServerStatus, info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::grpc::TableName)},
  { 7, -1, sizeof(::milvus::grpc::TableSchema)},
  { 16, -1, sizeof(::milvus::grpc::Range)},
  { 23, -1, sizeof(::milvus::grpc::RowRecord)},
  { 29, -1, sizeof(::milvus::grpc::InsertInfos)},
  { 36, -1, sizeof(::milvus::grpc::VectorIds)},
  { 43, -1, sizeof(::milvus::grpc::SearchVectorInfos)},
  { 52, -1, sizeof(::milvus::grpc::SearchVectorInFilesInfos)},
  { 59, -1, sizeof(::milvus::grpc::QueryResult)},
  { 66, -1, sizeof(::milvus::grpc::TopKQueryResult)},
  { 73, -1, sizeof(::milvus::grpc::StringReply)},
  { 80, -1, sizeof(::milvus::grpc::BoolReply)},
  { 87, -1, sizeof(::milvus::grpc::TableRowCount)},
  { 94, -1, sizeof(::milvus::grpc::Command)},
  { 100, -1, sizeof(::milvus::grpc::ServerStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_TableName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_TableSchema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_RowRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_InsertInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_VectorIds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_SearchVectorInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_SearchVectorInFilesInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_QueryResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_TopKQueryResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_StringReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_BoolReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_TableRowCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::milvus::grpc::_ServerStatus_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_milvus_2eproto = {
  {}, AddDescriptors_milvus_2eproto, "milvus.proto", schemas,
  file_default_instances, TableStruct_milvus_2eproto::offsets,
  file_level_metadata_milvus_2eproto, 15, file_level_enum_descriptors_milvus_2eproto, file_level_service_descriptors_milvus_2eproto,
};

const char descriptor_table_protodef_milvus_2eproto[] =
  "\n\014milvus.proto\022\013milvus.grpc\032\014status.prot"
  "o\"D\n\tTableName\022#\n\006status\030\001 \001(\0132\023.milvus."
  "grpc.Status\022\022\n\ntable_name\030\002 \001(\t\"z\n\013Table"
  "Schema\022*\n\ntable_name\030\001 \001(\0132\026.milvus.grpc"
  ".TableName\022\022\n\nindex_type\030\002 \001(\005\022\021\n\tdimens"
  "ion\030\003 \001(\003\022\030\n\020store_raw_vector\030\004 \001(\010\"/\n\005R"
  "ange\022\023\n\013start_value\030\001 \001(\t\022\021\n\tend_value\030\002"
  " \001(\t\" \n\tRowRecord\022\023\n\013vector_data\030\001 \003(\002\"S"
  "\n\013InsertInfos\022\022\n\ntable_name\030\001 \001(\t\0220\n\020row"
  "_record_array\030\002 \003(\0132\026.milvus.grpc.RowRec"
  "ord\"I\n\tVectorIds\022#\n\006status\030\001 \001(\0132\023.milvu"
  "s.grpc.Status\022\027\n\017vector_id_array\030\002 \003(\003\"\230"
  "\001\n\021SearchVectorInfos\022\022\n\ntable_name\030\001 \001(\t"
  "\0222\n\022query_record_array\030\002 \003(\0132\026.milvus.gr"
  "pc.RowRecord\022-\n\021query_range_array\030\003 \003(\0132"
  "\022.milvus.grpc.Range\022\014\n\004topk\030\004 \001(\003\"n\n\030Sea"
  "rchVectorInFilesInfos\022\025\n\rfile_id_array\030\001"
  " \003(\t\022;\n\023search_vector_infos\030\002 \001(\0132\036.milv"
  "us.grpc.SearchVectorInfos\"+\n\013QueryResult"
  "\022\n\n\002id\030\001 \001(\003\022\020\n\010distance\030\002 \001(\001\"m\n\017TopKQu"
  "eryResult\022#\n\006status\030\001 \001(\0132\023.milvus.grpc."
  "Status\0225\n\023query_result_arrays\030\002 \003(\0132\030.mi"
  "lvus.grpc.QueryResult\"H\n\013StringReply\022#\n\006"
  "status\030\001 \001(\0132\023.milvus.grpc.Status\022\024\n\014str"
  "ing_reply\030\002 \001(\t\"D\n\tBoolReply\022#\n\006status\030\001"
  " \001(\0132\023.milvus.grpc.Status\022\022\n\nbool_reply\030"
  "\002 \001(\010\"M\n\rTableRowCount\022#\n\006status\030\001 \001(\0132\023"
  ".milvus.grpc.Status\022\027\n\017table_row_count\030\002"
  " \001(\003\"\026\n\007Command\022\013\n\003cmd\030\001 \001(\t\"A\n\014ServerSt"
  "atus\022#\n\006status\030\001 \001(\0132\023.milvus.grpc.Statu"
  "s\022\014\n\004info\030\002 \001(\t2\206\006\n\rMilvusService\022>\n\013Cre"
  "ateTable\022\030.milvus.grpc.TableSchema\032\023.mil"
  "vus.grpc.Status\"\000\022<\n\010HasTable\022\026.milvus.g"
  "rpc.TableName\032\026.milvus.grpc.BoolReply\"\000\022"
  ":\n\tDropTable\022\026.milvus.grpc.TableName\032\023.m"
  "ilvus.grpc.Status\"\000\022;\n\nBuildIndex\022\026.milv"
  "us.grpc.TableName\032\023.milvus.grpc.Status\"\000"
  "\022B\n\014InsertVector\022\030.milvus.grpc.InsertInf"
  "os\032\026.milvus.grpc.VectorIds\"\000\022P\n\014SearchVe"
  "ctor\022\036.milvus.grpc.SearchVectorInfos\032\034.m"
  "ilvus.grpc.TopKQueryResult\"\0000\001\022^\n\023Search"
  "VectorInFiles\022%.milvus.grpc.SearchVector"
  "InFilesInfos\032\034.milvus.grpc.TopKQueryResu"
  "lt\"\0000\001\022C\n\rDescribeTable\022\026.milvus.grpc.Ta"
  "bleName\032\030.milvus.grpc.TableSchema\"\000\022H\n\020G"
  "etTableRowCount\022\026.milvus.grpc.TableName\032"
  "\032.milvus.grpc.TableRowCount\"\000\022>\n\nShowTab"
  "les\022\024.milvus.grpc.Command\032\026.milvus.grpc."
  "TableName\"\0000\001\0229\n\004Ping\022\024.milvus.grpc.Comm"
  "and\032\031.milvus.grpc.ServerStatus\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_milvus_2eproto = {
  false, InitDefaults_milvus_2eproto, 
  descriptor_table_protodef_milvus_2eproto,
  "milvus.proto", &assign_descriptors_table_milvus_2eproto, 2000,
};

void AddDescriptors_milvus_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_status_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_milvus_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_milvus_2eproto = []() { AddDescriptors_milvus_2eproto(); return true; }();
namespace milvus {
namespace grpc {

// ===================================================================

void TableName::InitAsDefaultInstance() {
  ::milvus::grpc::_TableName_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class TableName::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const TableName* msg);
};

const ::milvus::grpc::Status&
TableName::HasBitSetters::status(const TableName* msg) {
  return *msg->status_;
}
void TableName::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableName::kStatusFieldNumber;
const int TableName::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableName::TableName()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.TableName)
}
TableName::TableName(const TableName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.TableName)
}

void TableName::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TableName_milvus_2eproto.base);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

TableName::~TableName() {
  // @@protoc_insertion_point(destructor:milvus.grpc.TableName)
  SharedDtor();
}

void TableName::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void TableName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableName& TableName::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TableName_milvus_2eproto.base);
  return *internal_default_instance();
}


void TableName::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.TableName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableName::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TableName*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string table_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.TableName.table_name");
        object = msg->mutable_table_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.TableName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.TableName.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.TableName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.TableName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.TableName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.TableName.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.TableName)
}

::google::protobuf::uint8* TableName::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.TableName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.TableName.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.TableName)
  return target;
}

size_t TableName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.TableName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.TableName)
  GOOGLE_DCHECK_NE(&from, this);
  const TableName* source =
      ::google::protobuf::DynamicCastToGenerated<TableName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.TableName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.TableName)
    MergeFrom(*source);
  }
}

void TableName::MergeFrom(const TableName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.TableName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
}

void TableName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.TableName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableName::CopyFrom(const TableName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.TableName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableName::IsInitialized() const {
  return true;
}

void TableName::Swap(TableName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableName::InternalSwap(TableName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata TableName::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TableSchema::InitAsDefaultInstance() {
  ::milvus::grpc::_TableSchema_default_instance_._instance.get_mutable()->table_name_ = const_cast< ::milvus::grpc::TableName*>(
      ::milvus::grpc::TableName::internal_default_instance());
}
class TableSchema::HasBitSetters {
 public:
  static const ::milvus::grpc::TableName& table_name(const TableSchema* msg);
};

const ::milvus::grpc::TableName&
TableSchema::HasBitSetters::table_name(const TableSchema* msg) {
  return *msg->table_name_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableSchema::kTableNameFieldNumber;
const int TableSchema::kIndexTypeFieldNumber;
const int TableSchema::kDimensionFieldNumber;
const int TableSchema::kStoreRawVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableSchema::TableSchema()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.TableSchema)
}
TableSchema::TableSchema(const TableSchema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_name()) {
    table_name_ = new ::milvus::grpc::TableName(*from.table_name_);
  } else {
    table_name_ = nullptr;
  }
  ::memcpy(&dimension_, &from.dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_raw_vector_) -
    reinterpret_cast<char*>(&dimension_)) + sizeof(store_raw_vector_));
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.TableSchema)
}

void TableSchema::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TableSchema_milvus_2eproto.base);
  ::memset(&table_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_raw_vector_) -
      reinterpret_cast<char*>(&table_name_)) + sizeof(store_raw_vector_));
}

TableSchema::~TableSchema() {
  // @@protoc_insertion_point(destructor:milvus.grpc.TableSchema)
  SharedDtor();
}

void TableSchema::SharedDtor() {
  if (this != internal_default_instance()) delete table_name_;
}

void TableSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableSchema& TableSchema::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TableSchema_milvus_2eproto.base);
  return *internal_default_instance();
}


void TableSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.TableSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && table_name_ != nullptr) {
    delete table_name_;
  }
  table_name_ = nullptr;
  ::memset(&dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_raw_vector_) -
      reinterpret_cast<char*>(&dimension_)) + sizeof(store_raw_vector_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableSchema::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TableSchema*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.TableName table_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::TableName::_InternalParse;
        object = msg->mutable_table_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 index_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_index_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 dimension = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_dimension(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool store_raw_vector = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_store_raw_vector(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.TableSchema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.TableName table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dimension = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool store_raw_vector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_raw_vector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.TableSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.TableSchema)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.TableSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::table_name(this), output);
  }

  // int32 index_type = 2;
  if (this->index_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index_type(), output);
  }

  // int64 dimension = 3;
  if (this->dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dimension(), output);
  }

  // bool store_raw_vector = 4;
  if (this->store_raw_vector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->store_raw_vector(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.TableSchema)
}

::google::protobuf::uint8* TableSchema::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.TableSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::table_name(this), target);
  }

  // int32 index_type = 2;
  if (this->index_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index_type(), target);
  }

  // int64 dimension = 3;
  if (this->dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dimension(), target);
  }

  // bool store_raw_vector = 4;
  if (this->store_raw_vector() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->store_raw_vector(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.TableSchema)
  return target;
}

size_t TableSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.TableSchema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.grpc.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_name_);
  }

  // int64 dimension = 3;
  if (this->dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dimension());
  }

  // int32 index_type = 2;
  if (this->index_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index_type());
  }

  // bool store_raw_vector = 4;
  if (this->store_raw_vector() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableSchema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.TableSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const TableSchema* source =
      ::google::protobuf::DynamicCastToGenerated<TableSchema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.TableSchema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.TableSchema)
    MergeFrom(*source);
  }
}

void TableSchema::MergeFrom(const TableSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.TableSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table_name()) {
    mutable_table_name()->::milvus::grpc::TableName::MergeFrom(from.table_name());
  }
  if (from.dimension() != 0) {
    set_dimension(from.dimension());
  }
  if (from.index_type() != 0) {
    set_index_type(from.index_type());
  }
  if (from.store_raw_vector() != 0) {
    set_store_raw_vector(from.store_raw_vector());
  }
}

void TableSchema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.TableSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSchema::CopyFrom(const TableSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.TableSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSchema::IsInitialized() const {
  return true;
}

void TableSchema::Swap(TableSchema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableSchema::InternalSwap(TableSchema* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_name_, other->table_name_);
  swap(dimension_, other->dimension_);
  swap(index_type_, other->index_type_);
  swap(store_raw_vector_, other->store_raw_vector_);
}

::google::protobuf::Metadata TableSchema::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
class Range::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kStartValueFieldNumber;
const int Range::kEndValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_value().size() > 0) {
    start_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_value_);
  }
  end_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_value().size() > 0) {
    end_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_value_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.Range)
}

void Range::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Range_milvus_2eproto.base);
  start_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:milvus.grpc.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  start_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Range& Range::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Range_milvus_2eproto.base);
  return *internal_default_instance();
}


void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Range::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Range*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string start_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.Range.start_value");
        object = msg->mutable_start_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string end_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.Range.end_value");
        object = msg->mutable_end_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.Range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_value().data(), static_cast<int>(this->start_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.Range.start_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_value().data(), static_cast<int>(this->end_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.Range.end_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.Range)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_value = 1;
  if (this->start_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_value().data(), static_cast<int>(this->start_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.Range.start_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_value(), output);
  }

  // string end_value = 2;
  if (this->end_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_value().data(), static_cast<int>(this->end_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.Range.end_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_value = 1;
  if (this->start_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_value().data(), static_cast<int>(this->start_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.Range.start_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_value(), target);
  }

  // string end_value = 2;
  if (this->end_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_value().data(), static_cast<int>(this->end_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.Range.end_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.Range)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start_value = 1;
  if (this->start_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_value());
  }

  // string end_value = 2;
  if (this->end_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::DynamicCastToGenerated<Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_value().size() > 0) {

    start_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_value_);
  }
  if (from.end_value().size() > 0) {

    end_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_value_);
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_value_.Swap(&other->start_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_value_.Swap(&other->end_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Range::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RowRecord::InitAsDefaultInstance() {
}
class RowRecord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowRecord::kVectorDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowRecord::RowRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.RowRecord)
}
RowRecord::RowRecord(const RowRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      vector_data_(from.vector_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.RowRecord)
}

void RowRecord::SharedCtor() {
}

RowRecord::~RowRecord() {
  // @@protoc_insertion_point(destructor:milvus.grpc.RowRecord)
  SharedDtor();
}

void RowRecord::SharedDtor() {
}

void RowRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RowRecord& RowRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RowRecord_milvus_2eproto.base);
  return *internal_default_instance();
}


void RowRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.RowRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RowRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RowRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated float vector_data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_vector_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        do {
          msg->add_vector_data(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 13 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RowRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.RowRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float vector_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vector_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_vector_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.RowRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.RowRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RowRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.RowRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector_data = 1;
  if (this->vector_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vector_data_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vector_data().data(), this->vector_data_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.RowRecord)
}

::google::protobuf::uint8* RowRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.RowRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector_data = 1;
  if (this->vector_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _vector_data_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vector_data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.RowRecord)
  return target;
}

size_t RowRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.RowRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vector_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _vector_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.RowRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const RowRecord* source =
      ::google::protobuf::DynamicCastToGenerated<RowRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.RowRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.RowRecord)
    MergeFrom(*source);
  }
}

void RowRecord::MergeFrom(const RowRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.RowRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_data_.MergeFrom(from.vector_data_);
}

void RowRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.RowRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowRecord::CopyFrom(const RowRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.RowRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowRecord::IsInitialized() const {
  return true;
}

void RowRecord::Swap(RowRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowRecord::InternalSwap(RowRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vector_data_.InternalSwap(&other->vector_data_);
}

::google::protobuf::Metadata RowRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InsertInfos::InitAsDefaultInstance() {
}
class InsertInfos::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsertInfos::kTableNameFieldNumber;
const int InsertInfos::kRowRecordArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsertInfos::InsertInfos()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.InsertInfos)
}
InsertInfos::InsertInfos(const InsertInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      row_record_array_(from.row_record_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.InsertInfos)
}

void InsertInfos::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InsertInfos_milvus_2eproto.base);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InsertInfos::~InsertInfos() {
  // @@protoc_insertion_point(destructor:milvus.grpc.InsertInfos)
  SharedDtor();
}

void InsertInfos::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InsertInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertInfos& InsertInfos::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InsertInfos_milvus_2eproto.base);
  return *internal_default_instance();
}


void InsertInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.InsertInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_record_array_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InsertInfos::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InsertInfos*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.InsertInfos.table_name");
        object = msg->mutable_table_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .milvus.grpc.RowRecord row_record_array = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::milvus::grpc::RowRecord::_InternalParse;
          object = msg->add_row_record_array();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InsertInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.InsertInfos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.InsertInfos.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.grpc.RowRecord row_record_array = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_row_record_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.InsertInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.InsertInfos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InsertInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.InsertInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.InsertInfos.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .milvus.grpc.RowRecord row_record_array = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_record_array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->row_record_array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.InsertInfos)
}

::google::protobuf::uint8* InsertInfos::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.InsertInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.InsertInfos.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .milvus.grpc.RowRecord row_record_array = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_record_array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->row_record_array(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.InsertInfos)
  return target;
}

size_t InsertInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.InsertInfos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.grpc.RowRecord row_record_array = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->row_record_array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->row_record_array(static_cast<int>(i)));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.InsertInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertInfos* source =
      ::google::protobuf::DynamicCastToGenerated<InsertInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.InsertInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.InsertInfos)
    MergeFrom(*source);
  }
}

void InsertInfos::MergeFrom(const InsertInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.InsertInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_record_array_.MergeFrom(from.row_record_array_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void InsertInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.InsertInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertInfos::CopyFrom(const InsertInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.InsertInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertInfos::IsInitialized() const {
  return true;
}

void InsertInfos::Swap(InsertInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsertInfos::InternalSwap(InsertInfos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&row_record_array_)->InternalSwap(CastToBase(&other->row_record_array_));
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata InsertInfos::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VectorIds::InitAsDefaultInstance() {
  ::milvus::grpc::_VectorIds_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class VectorIds::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const VectorIds* msg);
};

const ::milvus::grpc::Status&
VectorIds::HasBitSetters::status(const VectorIds* msg) {
  return *msg->status_;
}
void VectorIds::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorIds::kStatusFieldNumber;
const int VectorIds::kVectorIdArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorIds::VectorIds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.VectorIds)
}
VectorIds::VectorIds(const VectorIds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      vector_id_array_(from.vector_id_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.VectorIds)
}

void VectorIds::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VectorIds_milvus_2eproto.base);
  status_ = nullptr;
}

VectorIds::~VectorIds() {
  // @@protoc_insertion_point(destructor:milvus.grpc.VectorIds)
  SharedDtor();
}

void VectorIds::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void VectorIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorIds& VectorIds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VectorIds_milvus_2eproto.base);
  return *internal_default_instance();
}


void VectorIds::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.VectorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_id_array_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VectorIds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VectorIds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated int64 vector_id_array = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_vector_id_array();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_vector_id_array(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VectorIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.VectorIds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 vector_id_array = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vector_id_array())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_vector_id_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.VectorIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.VectorIds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VectorIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.VectorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // repeated int64 vector_id_array = 2;
  if (this->vector_id_array_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vector_id_array_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->vector_id_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->vector_id_array(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.VectorIds)
}

::google::protobuf::uint8* VectorIds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.VectorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // repeated int64 vector_id_array = 2;
  if (this->vector_id_array_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _vector_id_array_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->vector_id_array_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.VectorIds)
  return target;
}

size_t VectorIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.VectorIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 vector_id_array = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->vector_id_array_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _vector_id_array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.VectorIds)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorIds* source =
      ::google::protobuf::DynamicCastToGenerated<VectorIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.VectorIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.VectorIds)
    MergeFrom(*source);
  }
}

void VectorIds::MergeFrom(const VectorIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.VectorIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_id_array_.MergeFrom(from.vector_id_array_);
  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
}

void VectorIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.VectorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorIds::CopyFrom(const VectorIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.VectorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorIds::IsInitialized() const {
  return true;
}

void VectorIds::Swap(VectorIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorIds::InternalSwap(VectorIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vector_id_array_.InternalSwap(&other->vector_id_array_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata VectorIds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchVectorInfos::InitAsDefaultInstance() {
}
class SearchVectorInfos::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVectorInfos::kTableNameFieldNumber;
const int SearchVectorInfos::kQueryRecordArrayFieldNumber;
const int SearchVectorInfos::kQueryRangeArrayFieldNumber;
const int SearchVectorInfos::kTopkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVectorInfos::SearchVectorInfos()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.SearchVectorInfos)
}
SearchVectorInfos::SearchVectorInfos(const SearchVectorInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      query_record_array_(from.query_record_array_),
      query_range_array_(from.query_range_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  topk_ = from.topk_;
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.SearchVectorInfos)
}

void SearchVectorInfos::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchVectorInfos_milvus_2eproto.base);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topk_ = PROTOBUF_LONGLONG(0);
}

SearchVectorInfos::~SearchVectorInfos() {
  // @@protoc_insertion_point(destructor:milvus.grpc.SearchVectorInfos)
  SharedDtor();
}

void SearchVectorInfos::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchVectorInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchVectorInfos& SearchVectorInfos::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchVectorInfos_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchVectorInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.SearchVectorInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_record_array_.Clear();
  query_range_array_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topk_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchVectorInfos::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchVectorInfos*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.SearchVectorInfos.table_name");
        object = msg->mutable_table_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .milvus.grpc.RowRecord query_record_array = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::milvus::grpc::RowRecord::_InternalParse;
          object = msg->add_query_record_array();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .milvus.grpc.Range query_range_array = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::milvus::grpc::Range::_InternalParse;
          object = msg->add_query_range_array();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int64 topk = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_topk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchVectorInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.SearchVectorInfos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.SearchVectorInfos.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.grpc.RowRecord query_record_array = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_record_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.grpc.Range query_range_array = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_range_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 topk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.SearchVectorInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.SearchVectorInfos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchVectorInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.SearchVectorInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.SearchVectorInfos.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .milvus.grpc.RowRecord query_record_array = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_record_array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->query_record_array(static_cast<int>(i)),
      output);
  }

  // repeated .milvus.grpc.Range query_range_array = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_range_array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->query_range_array(static_cast<int>(i)),
      output);
  }

  // int64 topk = 4;
  if (this->topk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->topk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.SearchVectorInfos)
}

::google::protobuf::uint8* SearchVectorInfos::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.SearchVectorInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.SearchVectorInfos.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .milvus.grpc.RowRecord query_record_array = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_record_array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->query_record_array(static_cast<int>(i)), target);
  }

  // repeated .milvus.grpc.Range query_range_array = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_range_array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->query_range_array(static_cast<int>(i)), target);
  }

  // int64 topk = 4;
  if (this->topk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->topk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.SearchVectorInfos)
  return target;
}

size_t SearchVectorInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.SearchVectorInfos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.grpc.RowRecord query_record_array = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->query_record_array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_record_array(static_cast<int>(i)));
    }
  }

  // repeated .milvus.grpc.Range query_range_array = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->query_range_array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_range_array(static_cast<int>(i)));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // int64 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->topk());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchVectorInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.SearchVectorInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVectorInfos* source =
      ::google::protobuf::DynamicCastToGenerated<SearchVectorInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.SearchVectorInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.SearchVectorInfos)
    MergeFrom(*source);
  }
}

void SearchVectorInfos::MergeFrom(const SearchVectorInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.SearchVectorInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_record_array_.MergeFrom(from.query_record_array_);
  query_range_array_.MergeFrom(from.query_range_array_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
}

void SearchVectorInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.SearchVectorInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVectorInfos::CopyFrom(const SearchVectorInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.SearchVectorInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVectorInfos::IsInitialized() const {
  return true;
}

void SearchVectorInfos::Swap(SearchVectorInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchVectorInfos::InternalSwap(SearchVectorInfos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&query_record_array_)->InternalSwap(CastToBase(&other->query_record_array_));
  CastToBase(&query_range_array_)->InternalSwap(CastToBase(&other->query_range_array_));
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(topk_, other->topk_);
}

::google::protobuf::Metadata SearchVectorInfos::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchVectorInFilesInfos::InitAsDefaultInstance() {
  ::milvus::grpc::_SearchVectorInFilesInfos_default_instance_._instance.get_mutable()->search_vector_infos_ = const_cast< ::milvus::grpc::SearchVectorInfos*>(
      ::milvus::grpc::SearchVectorInfos::internal_default_instance());
}
class SearchVectorInFilesInfos::HasBitSetters {
 public:
  static const ::milvus::grpc::SearchVectorInfos& search_vector_infos(const SearchVectorInFilesInfos* msg);
};

const ::milvus::grpc::SearchVectorInfos&
SearchVectorInFilesInfos::HasBitSetters::search_vector_infos(const SearchVectorInFilesInfos* msg) {
  return *msg->search_vector_infos_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVectorInFilesInfos::kFileIdArrayFieldNumber;
const int SearchVectorInFilesInfos::kSearchVectorInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVectorInFilesInfos::SearchVectorInFilesInfos()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.SearchVectorInFilesInfos)
}
SearchVectorInFilesInfos::SearchVectorInFilesInfos(const SearchVectorInFilesInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      file_id_array_(from.file_id_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_search_vector_infos()) {
    search_vector_infos_ = new ::milvus::grpc::SearchVectorInfos(*from.search_vector_infos_);
  } else {
    search_vector_infos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.SearchVectorInFilesInfos)
}

void SearchVectorInFilesInfos::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchVectorInFilesInfos_milvus_2eproto.base);
  search_vector_infos_ = nullptr;
}

SearchVectorInFilesInfos::~SearchVectorInFilesInfos() {
  // @@protoc_insertion_point(destructor:milvus.grpc.SearchVectorInFilesInfos)
  SharedDtor();
}

void SearchVectorInFilesInfos::SharedDtor() {
  if (this != internal_default_instance()) delete search_vector_infos_;
}

void SearchVectorInFilesInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchVectorInFilesInfos& SearchVectorInFilesInfos::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchVectorInFilesInfos_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchVectorInFilesInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.SearchVectorInFilesInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_array_.Clear();
  if (GetArenaNoVirtual() == nullptr && search_vector_infos_ != nullptr) {
    delete search_vector_infos_;
  }
  search_vector_infos_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchVectorInFilesInfos::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchVectorInFilesInfos*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string file_id_array = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("milvus.grpc.SearchVectorInFilesInfos.file_id_array");
          object = msg->add_file_id_array();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .milvus.grpc.SearchVectorInfos search_vector_infos = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::SearchVectorInfos::_InternalParse;
        object = msg->mutable_search_vector_infos();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchVectorInFilesInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.SearchVectorInFilesInfos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string file_id_array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file_id_array()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id_array(this->file_id_array_size() - 1).data(),
            static_cast<int>(this->file_id_array(this->file_id_array_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.SearchVectorInFilesInfos.file_id_array"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.grpc.SearchVectorInfos search_vector_infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_search_vector_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.SearchVectorInFilesInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.SearchVectorInFilesInfos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchVectorInFilesInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.SearchVectorInFilesInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_id_array = 1;
  for (int i = 0, n = this->file_id_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id_array(i).data(), static_cast<int>(this->file_id_array(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.SearchVectorInFilesInfos.file_id_array");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id_array(i), output);
  }

  // .milvus.grpc.SearchVectorInfos search_vector_infos = 2;
  if (this->has_search_vector_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::search_vector_infos(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.SearchVectorInFilesInfos)
}

::google::protobuf::uint8* SearchVectorInFilesInfos::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.SearchVectorInFilesInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_id_array = 1;
  for (int i = 0, n = this->file_id_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id_array(i).data(), static_cast<int>(this->file_id_array(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.SearchVectorInFilesInfos.file_id_array");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->file_id_array(i), target);
  }

  // .milvus.grpc.SearchVectorInfos search_vector_infos = 2;
  if (this->has_search_vector_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::search_vector_infos(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.SearchVectorInFilesInfos)
  return target;
}

size_t SearchVectorInFilesInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.SearchVectorInFilesInfos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_id_array = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->file_id_array_size());
  for (int i = 0, n = this->file_id_array_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file_id_array(i));
  }

  // .milvus.grpc.SearchVectorInfos search_vector_infos = 2;
  if (this->has_search_vector_infos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *search_vector_infos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchVectorInFilesInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.SearchVectorInFilesInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVectorInFilesInfos* source =
      ::google::protobuf::DynamicCastToGenerated<SearchVectorInFilesInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.SearchVectorInFilesInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.SearchVectorInFilesInfos)
    MergeFrom(*source);
  }
}

void SearchVectorInFilesInfos::MergeFrom(const SearchVectorInFilesInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.SearchVectorInFilesInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_id_array_.MergeFrom(from.file_id_array_);
  if (from.has_search_vector_infos()) {
    mutable_search_vector_infos()->::milvus::grpc::SearchVectorInfos::MergeFrom(from.search_vector_infos());
  }
}

void SearchVectorInFilesInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.SearchVectorInFilesInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVectorInFilesInfos::CopyFrom(const SearchVectorInFilesInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.SearchVectorInFilesInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVectorInFilesInfos::IsInitialized() const {
  return true;
}

void SearchVectorInFilesInfos::Swap(SearchVectorInFilesInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchVectorInFilesInfos::InternalSwap(SearchVectorInFilesInfos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_id_array_.InternalSwap(CastToBase(&other->file_id_array_));
  swap(search_vector_infos_, other->search_vector_infos_);
}

::google::protobuf::Metadata SearchVectorInFilesInfos::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QueryResult::InitAsDefaultInstance() {
}
class QueryResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResult::kIdFieldNumber;
const int QueryResult::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResult::QueryResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.QueryResult)
}

void QueryResult::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:milvus.grpc.QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
}

void QueryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResult& QueryResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QueryResult_milvus_2eproto.base);
  return *internal_default_instance();
}


void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.QueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QueryResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double distance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.QueryResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.QueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.QueryResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.QueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // double distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.QueryResult)
}

::google::protobuf::uint8* QueryResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.QueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // double distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.QueryResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // double distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResult* source =
      ::google::protobuf::DynamicCastToGenerated<QueryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.QueryResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.QueryResult)
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void QueryResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata QueryResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TopKQueryResult::InitAsDefaultInstance() {
  ::milvus::grpc::_TopKQueryResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class TopKQueryResult::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const TopKQueryResult* msg);
};

const ::milvus::grpc::Status&
TopKQueryResult::HasBitSetters::status(const TopKQueryResult* msg) {
  return *msg->status_;
}
void TopKQueryResult::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopKQueryResult::kStatusFieldNumber;
const int TopKQueryResult::kQueryResultArraysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopKQueryResult::TopKQueryResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.TopKQueryResult)
}
TopKQueryResult::TopKQueryResult(const TopKQueryResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      query_result_arrays_(from.query_result_arrays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.TopKQueryResult)
}

void TopKQueryResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TopKQueryResult_milvus_2eproto.base);
  status_ = nullptr;
}

TopKQueryResult::~TopKQueryResult() {
  // @@protoc_insertion_point(destructor:milvus.grpc.TopKQueryResult)
  SharedDtor();
}

void TopKQueryResult::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void TopKQueryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopKQueryResult& TopKQueryResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TopKQueryResult_milvus_2eproto.base);
  return *internal_default_instance();
}


void TopKQueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.TopKQueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_result_arrays_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TopKQueryResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TopKQueryResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .milvus.grpc.QueryResult query_result_arrays = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::milvus::grpc::QueryResult::_InternalParse;
          object = msg->add_query_result_arrays();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TopKQueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.TopKQueryResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.grpc.QueryResult query_result_arrays = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_result_arrays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.TopKQueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.TopKQueryResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TopKQueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.TopKQueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // repeated .milvus.grpc.QueryResult query_result_arrays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_result_arrays_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->query_result_arrays(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.TopKQueryResult)
}

::google::protobuf::uint8* TopKQueryResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.TopKQueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // repeated .milvus.grpc.QueryResult query_result_arrays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_result_arrays_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->query_result_arrays(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.TopKQueryResult)
  return target;
}

size_t TopKQueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.TopKQueryResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.grpc.QueryResult query_result_arrays = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->query_result_arrays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_result_arrays(static_cast<int>(i)));
    }
  }

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopKQueryResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.TopKQueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TopKQueryResult* source =
      ::google::protobuf::DynamicCastToGenerated<TopKQueryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.TopKQueryResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.TopKQueryResult)
    MergeFrom(*source);
  }
}

void TopKQueryResult::MergeFrom(const TopKQueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.TopKQueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_result_arrays_.MergeFrom(from.query_result_arrays_);
  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
}

void TopKQueryResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.TopKQueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopKQueryResult::CopyFrom(const TopKQueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.TopKQueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopKQueryResult::IsInitialized() const {
  return true;
}

void TopKQueryResult::Swap(TopKQueryResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopKQueryResult::InternalSwap(TopKQueryResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&query_result_arrays_)->InternalSwap(CastToBase(&other->query_result_arrays_));
  swap(status_, other->status_);
}

::google::protobuf::Metadata TopKQueryResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StringReply::InitAsDefaultInstance() {
  ::milvus::grpc::_StringReply_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class StringReply::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const StringReply* msg);
};

const ::milvus::grpc::Status&
StringReply::HasBitSetters::status(const StringReply* msg) {
  return *msg->status_;
}
void StringReply::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringReply::kStatusFieldNumber;
const int StringReply::kStringReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringReply::StringReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.StringReply)
}
StringReply::StringReply(const StringReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.string_reply().size() > 0) {
    string_reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_reply_);
  }
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.StringReply)
}

void StringReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StringReply_milvus_2eproto.base);
  string_reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

StringReply::~StringReply() {
  // @@protoc_insertion_point(destructor:milvus.grpc.StringReply)
  SharedDtor();
}

void StringReply::SharedDtor() {
  string_reply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void StringReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringReply& StringReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StringReply_milvus_2eproto.base);
  return *internal_default_instance();
}


void StringReply::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.StringReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StringReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string string_reply = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.StringReply.string_reply");
        object = msg->mutable_string_reply();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.StringReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_reply()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_reply().data(), static_cast<int>(this->string_reply().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.StringReply.string_reply"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.StringReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.StringReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.StringReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // string string_reply = 2;
  if (this->string_reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_reply().data(), static_cast<int>(this->string_reply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.StringReply.string_reply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.StringReply)
}

::google::protobuf::uint8* StringReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.StringReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // string string_reply = 2;
  if (this->string_reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_reply().data(), static_cast<int>(this->string_reply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.StringReply.string_reply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.StringReply)
  return target;
}

size_t StringReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.StringReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_reply = 2;
  if (this->string_reply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_reply());
  }

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.StringReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StringReply* source =
      ::google::protobuf::DynamicCastToGenerated<StringReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.StringReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.StringReply)
    MergeFrom(*source);
  }
}

void StringReply::MergeFrom(const StringReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.StringReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_reply().size() > 0) {

    string_reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_reply_);
  }
  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
}

void StringReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.StringReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringReply::CopyFrom(const StringReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.StringReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringReply::IsInitialized() const {
  return true;
}

void StringReply::Swap(StringReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringReply::InternalSwap(StringReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  string_reply_.Swap(&other->string_reply_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata StringReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BoolReply::InitAsDefaultInstance() {
  ::milvus::grpc::_BoolReply_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class BoolReply::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const BoolReply* msg);
};

const ::milvus::grpc::Status&
BoolReply::HasBitSetters::status(const BoolReply* msg) {
  return *msg->status_;
}
void BoolReply::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolReply::kStatusFieldNumber;
const int BoolReply::kBoolReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolReply::BoolReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.BoolReply)
}
BoolReply::BoolReply(const BoolReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  bool_reply_ = from.bool_reply_;
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.BoolReply)
}

void BoolReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BoolReply_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bool_reply_) -
      reinterpret_cast<char*>(&status_)) + sizeof(bool_reply_));
}

BoolReply::~BoolReply() {
  // @@protoc_insertion_point(destructor:milvus.grpc.BoolReply)
  SharedDtor();
}

void BoolReply::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void BoolReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolReply& BoolReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BoolReply_milvus_2eproto.base);
  return *internal_default_instance();
}


void BoolReply::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.BoolReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  bool_reply_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BoolReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool bool_reply = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bool_reply(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.BoolReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_reply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.BoolReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.BoolReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.BoolReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // bool bool_reply = 2;
  if (this->bool_reply() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.BoolReply)
}

::google::protobuf::uint8* BoolReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.BoolReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // bool bool_reply = 2;
  if (this->bool_reply() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bool_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.BoolReply)
  return target;
}

size_t BoolReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.BoolReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool bool_reply = 2;
  if (this->bool_reply() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.BoolReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolReply* source =
      ::google::protobuf::DynamicCastToGenerated<BoolReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.BoolReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.BoolReply)
    MergeFrom(*source);
  }
}

void BoolReply::MergeFrom(const BoolReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.BoolReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
  if (from.bool_reply() != 0) {
    set_bool_reply(from.bool_reply());
  }
}

void BoolReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.BoolReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolReply::CopyFrom(const BoolReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.BoolReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolReply::IsInitialized() const {
  return true;
}

void BoolReply::Swap(BoolReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolReply::InternalSwap(BoolReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(bool_reply_, other->bool_reply_);
}

::google::protobuf::Metadata BoolReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TableRowCount::InitAsDefaultInstance() {
  ::milvus::grpc::_TableRowCount_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class TableRowCount::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const TableRowCount* msg);
};

const ::milvus::grpc::Status&
TableRowCount::HasBitSetters::status(const TableRowCount* msg) {
  return *msg->status_;
}
void TableRowCount::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableRowCount::kStatusFieldNumber;
const int TableRowCount::kTableRowCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableRowCount::TableRowCount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.TableRowCount)
}
TableRowCount::TableRowCount(const TableRowCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  table_row_count_ = from.table_row_count_;
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.TableRowCount)
}

void TableRowCount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TableRowCount_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_row_count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(table_row_count_));
}

TableRowCount::~TableRowCount() {
  // @@protoc_insertion_point(destructor:milvus.grpc.TableRowCount)
  SharedDtor();
}

void TableRowCount::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void TableRowCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableRowCount& TableRowCount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TableRowCount_milvus_2eproto.base);
  return *internal_default_instance();
}


void TableRowCount::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.TableRowCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  table_row_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableRowCount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TableRowCount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 table_row_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_table_row_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableRowCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.TableRowCount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 table_row_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &table_row_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.TableRowCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.TableRowCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableRowCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.TableRowCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // int64 table_row_count = 2;
  if (this->table_row_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->table_row_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.TableRowCount)
}

::google::protobuf::uint8* TableRowCount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.TableRowCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // int64 table_row_count = 2;
  if (this->table_row_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->table_row_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.TableRowCount)
  return target;
}

size_t TableRowCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.TableRowCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 table_row_count = 2;
  if (this->table_row_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->table_row_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableRowCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.TableRowCount)
  GOOGLE_DCHECK_NE(&from, this);
  const TableRowCount* source =
      ::google::protobuf::DynamicCastToGenerated<TableRowCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.TableRowCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.TableRowCount)
    MergeFrom(*source);
  }
}

void TableRowCount::MergeFrom(const TableRowCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.TableRowCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
  if (from.table_row_count() != 0) {
    set_table_row_count(from.table_row_count());
  }
}

void TableRowCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.TableRowCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRowCount::CopyFrom(const TableRowCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.TableRowCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRowCount::IsInitialized() const {
  return true;
}

void TableRowCount::Swap(TableRowCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableRowCount::InternalSwap(TableRowCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(table_row_count_, other->table_row_count_);
}

::google::protobuf::Metadata TableRowCount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
}
class Command::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Command_milvus_2eproto.base);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:milvus.grpc.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Command_milvus_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cmd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.Command.cmd");
        object = msg->mutable_cmd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.Command.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.Command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.Command.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.Command.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmd_.Swap(&other->cmd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerStatus::InitAsDefaultInstance() {
  ::milvus::grpc::_ServerStatus_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::grpc::Status*>(
      ::milvus::grpc::Status::internal_default_instance());
}
class ServerStatus::HasBitSetters {
 public:
  static const ::milvus::grpc::Status& status(const ServerStatus* msg);
};

const ::milvus::grpc::Status&
ServerStatus::HasBitSetters::status(const ServerStatus* msg) {
  return *msg->status_;
}
void ServerStatus::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStatus::kStatusFieldNumber;
const int ServerStatus::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStatus::ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.grpc.ServerStatus)
}
ServerStatus::ServerStatus(const ServerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_status()) {
    status_ = new ::milvus::grpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.grpc.ServerStatus)
}

void ServerStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServerStatus_milvus_2eproto.base);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

ServerStatus::~ServerStatus() {
  // @@protoc_insertion_point(destructor:milvus.grpc.ServerStatus)
  SharedDtor();
}

void ServerStatus::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ServerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerStatus& ServerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServerStatus_milvus_2eproto.base);
  return *internal_default_instance();
}


void ServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.grpc.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServerStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::milvus::grpc::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("milvus.grpc.ServerStatus.info");
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.grpc.ServerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.grpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "milvus.grpc.ServerStatus.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.grpc.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.grpc.ServerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.grpc.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.ServerStatus.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.grpc.ServerStatus)
}

::google::protobuf::uint8* ServerStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.grpc.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "milvus.grpc.ServerStatus.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.grpc.ServerStatus)
  return target;
}

size_t ServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.grpc.ServerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // .milvus.grpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.grpc.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<ServerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.grpc.ServerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.grpc.ServerStatus)
    MergeFrom(*source);
  }
}

void ServerStatus::MergeFrom(const ServerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.grpc.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_status()) {
    mutable_status()->::milvus::grpc::Status::MergeFrom(from.status());
  }
}

void ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.grpc.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatus::CopyFrom(const ServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.grpc.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus::IsInitialized() const {
  return true;
}

void ServerStatus::Swap(ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatus::InternalSwap(ServerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata ServerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_milvus_2eproto);
  return ::file_level_metadata_milvus_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace milvus
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::milvus::grpc::TableName* Arena::CreateMaybeMessage< ::milvus::grpc::TableName >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::TableName >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::TableSchema* Arena::CreateMaybeMessage< ::milvus::grpc::TableSchema >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::TableSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::Range* Arena::CreateMaybeMessage< ::milvus::grpc::Range >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::RowRecord* Arena::CreateMaybeMessage< ::milvus::grpc::RowRecord >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::RowRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::InsertInfos* Arena::CreateMaybeMessage< ::milvus::grpc::InsertInfos >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::InsertInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::VectorIds* Arena::CreateMaybeMessage< ::milvus::grpc::VectorIds >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::VectorIds >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::SearchVectorInfos* Arena::CreateMaybeMessage< ::milvus::grpc::SearchVectorInfos >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::SearchVectorInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::SearchVectorInFilesInfos* Arena::CreateMaybeMessage< ::milvus::grpc::SearchVectorInFilesInfos >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::SearchVectorInFilesInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::QueryResult* Arena::CreateMaybeMessage< ::milvus::grpc::QueryResult >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::TopKQueryResult* Arena::CreateMaybeMessage< ::milvus::grpc::TopKQueryResult >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::TopKQueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::StringReply* Arena::CreateMaybeMessage< ::milvus::grpc::StringReply >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::StringReply >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::BoolReply* Arena::CreateMaybeMessage< ::milvus::grpc::BoolReply >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::BoolReply >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::TableRowCount* Arena::CreateMaybeMessage< ::milvus::grpc::TableRowCount >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::TableRowCount >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::Command* Arena::CreateMaybeMessage< ::milvus::grpc::Command >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::grpc::ServerStatus* Arena::CreateMaybeMessage< ::milvus::grpc::ServerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::grpc::ServerStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
