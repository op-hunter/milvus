/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VectorService_TYPES_H
#define VectorService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct VecErrCode {
  enum type {
    SUCCESS = 0,
    ILLEGAL_ARGUMENT = 1,
    GROUP_NOT_EXISTS = 2,
    ILLEGAL_TIME_RANGE = 3,
    ILLEGAL_VECTOR_DIMENSION = 4,
    OUT_OF_MEMORY = 5
  };
};

extern const std::map<int, const char*> _VecErrCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const VecErrCode::type& val);

class VecException;

class VecGroup;

class VecTensor;

class VecTensorList;

class VecBinaryTensor;

class VecBinaryTensorList;

class VecSearchResultItem;

class VecSearchResult;

class VecSearchResultList;

class VecDateTime;

class VecTimeRange;

class VecSearchFilter;

typedef struct _VecException__isset {
  _VecException__isset() : code(false), reason(false) {}
  bool code :1;
  bool reason :1;
} _VecException__isset;

class VecException : public ::apache::thrift::TException {
 public:

  VecException(const VecException&);
  VecException& operator=(const VecException&);
  VecException() : code((VecErrCode::type)0), reason() {
  }

  virtual ~VecException() throw();
  VecErrCode::type code;
  std::string reason;

  _VecException__isset __isset;

  void __set_code(const VecErrCode::type val);

  void __set_reason(const std::string& val);

  bool operator == (const VecException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const VecException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(VecException &a, VecException &b);

std::ostream& operator<<(std::ostream& out, const VecException& obj);

typedef struct _VecGroup__isset {
  _VecGroup__isset() : index_type(false) {}
  bool index_type :1;
} _VecGroup__isset;

class VecGroup : public virtual ::apache::thrift::TBase {
 public:

  VecGroup(const VecGroup&);
  VecGroup& operator=(const VecGroup&);
  VecGroup() : id(), dimension(0), index_type(0) {
  }

  virtual ~VecGroup() throw();
  std::string id;
  int32_t dimension;
  int32_t index_type;

  _VecGroup__isset __isset;

  void __set_id(const std::string& val);

  void __set_dimension(const int32_t val);

  void __set_index_type(const int32_t val);

  bool operator == (const VecGroup & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(dimension == rhs.dimension))
      return false;
    if (__isset.index_type != rhs.__isset.index_type)
      return false;
    else if (__isset.index_type && !(index_type == rhs.index_type))
      return false;
    return true;
  }
  bool operator != (const VecGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecGroup &a, VecGroup &b);

std::ostream& operator<<(std::ostream& out, const VecGroup& obj);

typedef struct _VecTensor__isset {
  _VecTensor__isset() : attrib(false) {}
  bool attrib :1;
} _VecTensor__isset;

class VecTensor : public virtual ::apache::thrift::TBase {
 public:

  VecTensor(const VecTensor&);
  VecTensor& operator=(const VecTensor&);
  VecTensor() : uid() {
  }

  virtual ~VecTensor() throw();
  std::string uid;
  std::vector<double>  tensor;
  std::map<std::string, std::string>  attrib;

  _VecTensor__isset __isset;

  void __set_uid(const std::string& val);

  void __set_tensor(const std::vector<double> & val);

  void __set_attrib(const std::map<std::string, std::string> & val);

  bool operator == (const VecTensor & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(tensor == rhs.tensor))
      return false;
    if (__isset.attrib != rhs.__isset.attrib)
      return false;
    else if (__isset.attrib && !(attrib == rhs.attrib))
      return false;
    return true;
  }
  bool operator != (const VecTensor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecTensor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecTensor &a, VecTensor &b);

std::ostream& operator<<(std::ostream& out, const VecTensor& obj);


class VecTensorList : public virtual ::apache::thrift::TBase {
 public:

  VecTensorList(const VecTensorList&);
  VecTensorList& operator=(const VecTensorList&);
  VecTensorList() {
  }

  virtual ~VecTensorList() throw();
  std::vector<VecTensor>  tensor_list;

  void __set_tensor_list(const std::vector<VecTensor> & val);

  bool operator == (const VecTensorList & rhs) const
  {
    if (!(tensor_list == rhs.tensor_list))
      return false;
    return true;
  }
  bool operator != (const VecTensorList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecTensorList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecTensorList &a, VecTensorList &b);

std::ostream& operator<<(std::ostream& out, const VecTensorList& obj);

typedef struct _VecBinaryTensor__isset {
  _VecBinaryTensor__isset() : attrib(false) {}
  bool attrib :1;
} _VecBinaryTensor__isset;

class VecBinaryTensor : public virtual ::apache::thrift::TBase {
 public:

  VecBinaryTensor(const VecBinaryTensor&);
  VecBinaryTensor& operator=(const VecBinaryTensor&);
  VecBinaryTensor() : uid(), tensor() {
  }

  virtual ~VecBinaryTensor() throw();
  std::string uid;
  std::string tensor;
  std::map<std::string, std::string>  attrib;

  _VecBinaryTensor__isset __isset;

  void __set_uid(const std::string& val);

  void __set_tensor(const std::string& val);

  void __set_attrib(const std::map<std::string, std::string> & val);

  bool operator == (const VecBinaryTensor & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(tensor == rhs.tensor))
      return false;
    if (__isset.attrib != rhs.__isset.attrib)
      return false;
    else if (__isset.attrib && !(attrib == rhs.attrib))
      return false;
    return true;
  }
  bool operator != (const VecBinaryTensor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecBinaryTensor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecBinaryTensor &a, VecBinaryTensor &b);

std::ostream& operator<<(std::ostream& out, const VecBinaryTensor& obj);


class VecBinaryTensorList : public virtual ::apache::thrift::TBase {
 public:

  VecBinaryTensorList(const VecBinaryTensorList&);
  VecBinaryTensorList& operator=(const VecBinaryTensorList&);
  VecBinaryTensorList() {
  }

  virtual ~VecBinaryTensorList() throw();
  std::vector<VecBinaryTensor>  tensor_list;

  void __set_tensor_list(const std::vector<VecBinaryTensor> & val);

  bool operator == (const VecBinaryTensorList & rhs) const
  {
    if (!(tensor_list == rhs.tensor_list))
      return false;
    return true;
  }
  bool operator != (const VecBinaryTensorList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecBinaryTensorList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecBinaryTensorList &a, VecBinaryTensorList &b);

std::ostream& operator<<(std::ostream& out, const VecBinaryTensorList& obj);

typedef struct _VecSearchResultItem__isset {
  _VecSearchResultItem__isset() : distance(false), attrib(false) {}
  bool distance :1;
  bool attrib :1;
} _VecSearchResultItem__isset;

class VecSearchResultItem : public virtual ::apache::thrift::TBase {
 public:

  VecSearchResultItem(const VecSearchResultItem&);
  VecSearchResultItem& operator=(const VecSearchResultItem&);
  VecSearchResultItem() : uid(), distance(0) {
  }

  virtual ~VecSearchResultItem() throw();
  std::string uid;
  double distance;
  std::map<std::string, std::string>  attrib;

  _VecSearchResultItem__isset __isset;

  void __set_uid(const std::string& val);

  void __set_distance(const double val);

  void __set_attrib(const std::map<std::string, std::string> & val);

  bool operator == (const VecSearchResultItem & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (__isset.distance != rhs.__isset.distance)
      return false;
    else if (__isset.distance && !(distance == rhs.distance))
      return false;
    if (__isset.attrib != rhs.__isset.attrib)
      return false;
    else if (__isset.attrib && !(attrib == rhs.attrib))
      return false;
    return true;
  }
  bool operator != (const VecSearchResultItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecSearchResultItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecSearchResultItem &a, VecSearchResultItem &b);

std::ostream& operator<<(std::ostream& out, const VecSearchResultItem& obj);

typedef struct _VecSearchResult__isset {
  _VecSearchResult__isset() : result_list(false) {}
  bool result_list :1;
} _VecSearchResult__isset;

class VecSearchResult : public virtual ::apache::thrift::TBase {
 public:

  VecSearchResult(const VecSearchResult&);
  VecSearchResult& operator=(const VecSearchResult&);
  VecSearchResult() {
  }

  virtual ~VecSearchResult() throw();
  std::vector<VecSearchResultItem>  result_list;

  _VecSearchResult__isset __isset;

  void __set_result_list(const std::vector<VecSearchResultItem> & val);

  bool operator == (const VecSearchResult & rhs) const
  {
    if (!(result_list == rhs.result_list))
      return false;
    return true;
  }
  bool operator != (const VecSearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecSearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecSearchResult &a, VecSearchResult &b);

std::ostream& operator<<(std::ostream& out, const VecSearchResult& obj);

typedef struct _VecSearchResultList__isset {
  _VecSearchResultList__isset() : result_list(false) {}
  bool result_list :1;
} _VecSearchResultList__isset;

class VecSearchResultList : public virtual ::apache::thrift::TBase {
 public:

  VecSearchResultList(const VecSearchResultList&);
  VecSearchResultList& operator=(const VecSearchResultList&);
  VecSearchResultList() {
  }

  virtual ~VecSearchResultList() throw();
  std::vector<VecSearchResult>  result_list;

  _VecSearchResultList__isset __isset;

  void __set_result_list(const std::vector<VecSearchResult> & val);

  bool operator == (const VecSearchResultList & rhs) const
  {
    if (!(result_list == rhs.result_list))
      return false;
    return true;
  }
  bool operator != (const VecSearchResultList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecSearchResultList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecSearchResultList &a, VecSearchResultList &b);

std::ostream& operator<<(std::ostream& out, const VecSearchResultList& obj);


class VecDateTime : public virtual ::apache::thrift::TBase {
 public:

  VecDateTime(const VecDateTime&);
  VecDateTime& operator=(const VecDateTime&);
  VecDateTime() : year(0), month(0), day(0), hour(0), minute(0), second(0) {
  }

  virtual ~VecDateTime() throw();
  int32_t year;
  int32_t month;
  int32_t day;
  int32_t hour;
  int32_t minute;
  int32_t second;

  void __set_year(const int32_t val);

  void __set_month(const int32_t val);

  void __set_day(const int32_t val);

  void __set_hour(const int32_t val);

  void __set_minute(const int32_t val);

  void __set_second(const int32_t val);

  bool operator == (const VecDateTime & rhs) const
  {
    if (!(year == rhs.year))
      return false;
    if (!(month == rhs.month))
      return false;
    if (!(day == rhs.day))
      return false;
    if (!(hour == rhs.hour))
      return false;
    if (!(minute == rhs.minute))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const VecDateTime &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecDateTime & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecDateTime &a, VecDateTime &b);

std::ostream& operator<<(std::ostream& out, const VecDateTime& obj);


class VecTimeRange : public virtual ::apache::thrift::TBase {
 public:

  VecTimeRange(const VecTimeRange&);
  VecTimeRange& operator=(const VecTimeRange&);
  VecTimeRange() : begine_closed(0), end_closed(0) {
  }

  virtual ~VecTimeRange() throw();
  VecDateTime time_begin;
  bool begine_closed;
  VecDateTime time_end;
  bool end_closed;

  void __set_time_begin(const VecDateTime& val);

  void __set_begine_closed(const bool val);

  void __set_time_end(const VecDateTime& val);

  void __set_end_closed(const bool val);

  bool operator == (const VecTimeRange & rhs) const
  {
    if (!(time_begin == rhs.time_begin))
      return false;
    if (!(begine_closed == rhs.begine_closed))
      return false;
    if (!(time_end == rhs.time_end))
      return false;
    if (!(end_closed == rhs.end_closed))
      return false;
    return true;
  }
  bool operator != (const VecTimeRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecTimeRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecTimeRange &a, VecTimeRange &b);

std::ostream& operator<<(std::ostream& out, const VecTimeRange& obj);

typedef struct _VecSearchFilter__isset {
  _VecSearchFilter__isset() : attrib_filter(false), time_ranges(false) {}
  bool attrib_filter :1;
  bool time_ranges :1;
} _VecSearchFilter__isset;

class VecSearchFilter : public virtual ::apache::thrift::TBase {
 public:

  VecSearchFilter(const VecSearchFilter&);
  VecSearchFilter& operator=(const VecSearchFilter&);
  VecSearchFilter() {
  }

  virtual ~VecSearchFilter() throw();
  std::map<std::string, std::string>  attrib_filter;
  std::vector<VecTimeRange>  time_ranges;

  _VecSearchFilter__isset __isset;

  void __set_attrib_filter(const std::map<std::string, std::string> & val);

  void __set_time_ranges(const std::vector<VecTimeRange> & val);

  bool operator == (const VecSearchFilter & rhs) const
  {
    if (__isset.attrib_filter != rhs.__isset.attrib_filter)
      return false;
    else if (__isset.attrib_filter && !(attrib_filter == rhs.attrib_filter))
      return false;
    if (__isset.time_ranges != rhs.__isset.time_ranges)
      return false;
    else if (__isset.time_ranges && !(time_ranges == rhs.time_ranges))
      return false;
    return true;
  }
  bool operator != (const VecSearchFilter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VecSearchFilter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VecSearchFilter &a, VecSearchFilter &b);

std::ostream& operator<<(std::ostream& out, const VecSearchFilter& obj);



#endif
