String cron_timezone = "TZ=Asia/Shanghai"
String cron_string = BRANCH_NAME == "master" ? "H 0 * * * " : ""
cron_string =  BRANCH_NAME == "0.5.1" ? "H 1 * * * " : cron_string

pipeline {
    agent none

    triggers {
        cron """${cron_timezone}
            ${cron_string}"""
    }

    options {
        timestamps()
    }

    parameters{
        choice choices: ['Release', 'Debug'], description: '', name: 'BUILD_TYPE'
        string defaultValue: 'registry.zilliz.com', description: 'DOCKER REGISTRY URL', name: 'DOKCER_REGISTRY_URL', trim: true
        string defaultValue: 'ba070c98-c8cc-4f7c-b657-897715f359fc', description: 'DOCKER CREDENTIALS ID', name: 'DOCKER_CREDENTIALS_ID', trim: true
        string defaultValue: 'http://192.168.1.202/artifactory/milvus', description: 'JFROG ARTFACTORY URL', name: 'JFROG_ARTFACTORY_URL', trim: true
        string defaultValue: '1a527823-d2b7-44fd-834b-9844350baf14', description: 'JFROG CREDENTIALS ID', name: 'JFROG_CREDENTIALS_ID', trim: true
    }

    environment {
        PROJECT_NAME = "milvus"
        LOWER_BUILD_TYPE = params.BUILD_TYPE.toLowerCase()
        SEMVER = "${BRANCH_NAME}"
        JOBNAMES = env.JOB_NAME.split('/')
        PIPELINE_NAME = "${JOBNAMES[0]}"
    }

    stages {
        stage("Ubuntu 18.04") {
            environment {
                OS_NAME = "ubuntu18.04"
                PACKAGE_VERSION = VersionNumber([
                    versionNumberString : '${SEMVER}-${LOWER_BUILD_TYPE}-ubuntu18.04-x86_64-${BUILD_DATE_FORMATTED, "yyyyMMdd"}-${BUILDS_TODAY}'
                ]);
                DOCKER_VERSION = "${SEMVER}-${OS_NAME}-${LOWER_BUILD_TYPE}"
            }

            stages {
                stage("Run Build") {
                    agent {
                        kubernetes {
                            label 'build'
                            defaultContainer 'jnlp'
                            yamlFile 'ci/jenkins/pod/milvus-build-env-pod.yaml'
                        }
                    }

                    stages {
                        stage('Build') {
                            steps {
                                container('milvus-build-env') {
                                    script {
                                        load "${env.WORKSPACE}/ci/jenkins/step/build.groovy"
                                    }
                                }
                            }
                        }
                        stage('Code Coverage') {
                            steps {
                                container('milvus-build-env') {
                                    script {
                                        load "${env.WORKSPACE}/ci/jenkins/step/coverage.groovy"
                                    }
                                }
                            }
                        }
                        stage('Upload Package') {
                            steps {
                                container('milvus-build-env') {
                                    script {
                                        load "${env.WORKSPACE}/ci/jenkins/step/package.groovy"
                                    }
                                }
                            }
                        }
                    }
                }

                stage("Publish docker images") {
                    agent {
                        kubernetes {
                            label 'publish'
                            defaultContainer 'jnlp'
                            yamlFile 'ci/jenkins/pod/docker-pod.yaml'
                        }
                    }

                    stages {
                        stage('Publish') {
                            steps {
                                container('publish-images'){
                                    script {
                                        load "${env.WORKSPACE}/ci/jenkins/step/publishImages.groovy"
                                    }
                                }
                            }
                        }
                    }
                }

                stage("Deploy to Development") {
                    agent {
                        kubernetes {
                            label 'dev-test'
                            defaultContainer 'jnlp'
                            yamlFile 'ci/jenkins/pod/testEnvironment.yaml'
                        }
                    }

                    stages {
                        stage("Deploy to Dev") {
                            steps {
                                container('milvus-test-env') {
                                    script {
                                        load "${env.WORKSPACE}/ci/jenkins/step/deploySingle2Dev.groovy"
                                    }
                                }
                            }
                        }

                        stage("Dev Test") {
                            steps {
                                container('milvus-test-env') {
                                    script {
                                        boolean isNightlyTest = isTimeTriggeredBuild()
                                        if (isNightlyTest) {
                                            load "${env.WORKSPACE}/ci/jenkins/step/singleDevNightlyTest.groovy"
                                        } else {
                                            load "${env.WORKSPACE}/ci/jenkins/step/singleDevTest.groovy"
                                        }
                                    }
                                }
                            }
                        }

                        stage ("Cleanup Dev") {
                            steps {
                                container('milvus-test-env') {
                                    script {
                                        load "${env.WORKSPACE}/ci/jenkins/step/cleanupSingleDev.groovy"
                                    }
                                }
                            }
                        }
                    }
                    post {
                        unsuccessful {
                            container('milvus-test-env') {
                                script {
                                    load "${env.WORKSPACE}/ci/jenkins/step/cleanupSingleDev.groovy"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

boolean isTimeTriggeredBuild() {
    if (currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause').size() != 0) {
        return true
    }
    return false
}
